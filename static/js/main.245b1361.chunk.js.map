{"version":3,"sources":["assets/background.jpg","pages/home/styles/index.ts","pages/home/helpers/get-roll-obj/index.ts","pages/home/helpers/get-stats-obj/index.ts","components/advanced-table/index.tsx","pages/home/index.tsx","core/router/index.tsx","core/reducer.ts","core/config.ts","core/store.ts","core/app/index.tsx","core/serviceWorker.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","Row","styled","div","withConfig","displayName","componentId","TablePositioner","PageInnerContent","ButtonsContainer","PageWrapper","PageContainer","background","get_roll_obj","diceAmount","arguments","length","undefined","range","map","sides","Math","floor","random","rollDice","get_stats_obj","item","getRollObj","AdvancedTable","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","gridApi","onGridReady","bind","assertThisInitialized","params","api","sizeColumnsToFit","_this$props","columns","rowData","react_default","a","createElement","className","style","height","width","main","columnDefs","animateRows","Component","HomePage","state","rolls","clearRolls","rollMultipleDice","fullRoll","getStatsObj","setState","prevState","concat","toConsumableArray","_this2","rollAmount","statRow","computedStatBlock","reduce","acc","rowRolls","index","b","sort","average","round","total","current","objectSpread","defaultColumnSettings","sortable","resizable","filter","displayRolls","getDisplayRolls","statColumns","headerName","field","toString","otherColumns","console","log","Button_default","variant","color","onClick","advanced_table","router","BrowserRouter","basename","Switch","Route","component","exact","path","initialState","rootReducer","type","core_reducer","history","combineReducers","connectRouter","encryptor","createEncryptor","secretKey","onError","localStorage","clear","window","location","reload","persistConfig","key","storage","blacklist","transforms","throttle","createBrowserHistory","logger","createLogger","collapsed","level","composeEnhancers","composeWithDevTools","getStore","reducer","storeMode","createStore","applyMiddleware","routerMiddleware","mode","createRootReducer","persistedReducer","persistReducer","store","persistor","persistStore","configureStore","App","es","integration_react","loading","esm","Boolean","hostname","match","ReactDOM","render","app","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,iVCG3BC,EAAOC,IAAOC,IAAXC,WAAA,CAAAC,YAAA,cAAAC,YAAA,YAAIJ,CAAJ,uFAQHK,EAAmBL,IAAOC,IAAXC,WAAA,CAAAC,YAAA,0BAAAC,YAAA,YAAIJ,CAAJ,0HAUfM,EAAoBN,IAAOC,IAAXC,WAAA,CAAAC,YAAA,2BAAAC,YAAA,YAAIJ,CAAJ,8DAOhBO,EAAoBP,IAAOC,IAAXC,WAAA,CAAAC,YAAA,2BAAAC,YAAA,YAAIJ,CAAJ,sEAUhBQ,EAAeR,IAAOC,IAAXC,WAAA,CAAAC,YAAA,sBAAAC,YAAA,YAAIJ,CAAJ,+NAaXS,EAAiBT,IAAOC,IAAXC,WAAA,CAAAC,YAAA,wBAAAC,YAAA,YAAIJ,CAAJ,4NAQNU,+BCrDLC,EAAA,WAAsC,IAArCC,EAAqCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAhB,EACnC,OAAOG,gBAAM,EAAGJ,GACbK,IAAI,WACH,OAPW,WAAuB,IAAtBC,EAAsBL,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAN,EAChC,OAAOM,KAAKC,MAAMD,KAAKE,SAAWH,GAAS,EAMhCI,MCNEC,EAAA,WACb,OAAOP,gBAAM,EAAG,GAAGC,IAAI,SAACO,GACtB,OAAOC,gBCoDIC,6BArCb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAHAQ,aAEW,EAGjBP,EAAKQ,YAAcR,EAAKQ,YAAYC,KAAjBR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KAHFA,2EAMPW,GACVR,KAAKI,QAAUI,EAAOC,IACtBT,KAAKI,QAAQM,iGAON,IAAAC,EACsBX,KAAKJ,MAA1BgB,EADDD,EACCC,QAASC,EADVF,EACUE,QACjB,OACEC,EAAAC,EAAAC,cAAA,OACEC,UAAU,kBACVC,MAAO,CACLC,OAAQ,OACRC,MAAO,SAGTN,EAAAC,EAAAC,cAACK,EAAA,YAAD,CACEC,WAAYV,EACZC,QAASA,EACTU,aAAa,EACblB,YAAaL,KAAKK,sBAhCAmB,uBCDPC,cAKnB,SAAAA,EAAY7B,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAyB,IACjB5B,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA2B,GAAAtB,KAAAH,KAAMJ,KALR8B,MAAQ,CACNC,MAAO,IAMP9B,EAAKN,SAAWM,EAAKN,SAASe,KAAdR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KAChBA,EAAK+B,WAAa/B,EAAK+B,WAAWtB,KAAhBR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KAClBA,EAAKgC,iBAAmBhC,EAAKgC,iBAAiBvB,KAAtBR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KALPA,0EASjB,IAAMiC,EAAWC,IACjB/B,KAAKgC,SAAS,SAACC,GACb,MAAO,CACLN,MAAK,GAAAO,OAAApC,OAAAqC,EAAA,EAAArC,CACAmC,EAAUN,OADV,CAEHG,kDAMmC,IAAAM,EAAApC,KAA1BqC,EAA0BvD,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAL,IACpC,OAAO,WACL,IAAM6C,EAAQ1C,gBAAM,EAAGoD,GAAYnD,IAAI6C,GACvCK,EAAKJ,SAAS,SAACC,GACb,MAAO,CACLN,MAAK,GAAAO,OAAApC,OAAAqC,EAAA,EAAArC,CACAmC,EAAUN,OADV7B,OAAAqC,EAAA,EAAArC,CAEA6B,6CAQX3B,KAAKgC,SAAS,CAAEL,MAAO,+CAIvB,OAAO3B,KAAK0B,MAAMC,MAAMzC,IAAI,SAACoD,GAC3B,IAAMC,EAA8BD,EAAQE,OAAO,SAACC,EAAKC,EAAUC,GACjE,SAAAT,OAAApC,OAAAqC,EAAA,EAAArC,CACK2C,GADL,CAEEC,EAASF,OAAO,SAACzB,EAAG6B,GAAJ,OAAU7B,EAAI6B,OAE/B,IAAIC,KAAK,SAAC9B,EAAG6B,GAAJ,OAAUA,EAAI7B,IACpB+B,EAAUC,gBAAMR,EAAkBC,OAAO,SAACQ,EAAOC,GAAR,OAAoBD,EAAQC,IAAW,EAAG,GACzF,OAAOnD,OAAAoD,EAAA,EAAApD,CAAA,GACFyC,EADL,CAEEO,+CAMJ,IAAMK,EAAwB,CAC5BC,UAAU,EACVC,WAAW,EACXC,QAAQ,GAEJC,EAAevD,KAAKwD,kBACpBC,EAAcxE,gBAAM,EAAG,GAAGC,IAAI,SAAAO,GAAI,OAAAK,OAAAoD,EAAA,EAAApD,CAAA,CACtC4D,WAAU,QAAAxB,OAAUzC,EAAO,GAC3BkE,MAAOlE,EAAKmE,YACTT,KAECU,EAAe,CAAC/D,OAAAoD,EAAA,EAAApD,CAAA,CACpB4D,WAAY,UACZC,MAAO,WACJR,IAECvC,EAAO,GAAAsB,OAAApC,OAAAqC,EAAA,EAAArC,CACR2D,GACAI,GAOL,OAJAC,QAAQC,IAAI,CACVnD,UACA2C,iBAGAzC,EAAAC,EAAAC,cAACtC,EAAD,KACEoC,EAAAC,EAAAC,cAACvC,EAAD,KACEqC,EAAAC,EAAAC,cAACzC,EAAD,KACEuC,EAAAC,EAAAC,cAAChD,EAAD,KACE8C,EAAAC,EAAAC,cAAA,sCAEFF,EAAAC,EAAAC,cAAChD,EAAD,KACE8C,EAAAC,EAAAC,cAACxC,EAAD,KACEsC,EAAAC,EAAAC,cAACgD,EAAAjD,EAAD,CAAQkD,QAAQ,YAAYC,MAAM,UAAUC,QAASnE,KAAKT,UAA1D,SAGAuB,EAAAC,EAAAC,cAACgD,EAAAjD,EAAD,CAAQkD,QAAQ,YAAYC,MAAM,UAAUC,QAASnE,KAAK6B,oBAA1D,aAGAf,EAAAC,EAAAC,cAACgD,EAAAjD,EAAD,CAAQkD,QAAQ,YAAYC,MAAM,UAAUC,QAASnE,KAAK4B,YAA1D,YAKJd,EAAAC,EAAAC,cAAC1C,EAAD,KACEwC,EAAAC,EAAAC,cAACoD,EAAD,CACExD,QAASA,EACTC,QAAS0C,eA5Ga/B,aCZtC6C,EAAA,WAAe,OACbvD,EAAAC,EAAAC,cAACsD,EAAA,EAAD,CACEC,SAAU,eAEVzD,EAAAC,EAAAC,cAACwD,EAAA,EAAD,KACE1D,EAAAC,EAAAC,cAACyD,EAAA,EAAD,CAAOC,UAAWjD,EAAUkD,OAAK,EAACC,KAAK,8DCDvCC,EAAe,GAEfC,EAAc,WAAuC,IAAtCpD,EAAsC5C,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAA9B+F,GAA8B/F,UAAAC,OAAA,EAAAD,UAAA,QAAAE,GACjD+F,KAGJ,OAAOrD,GAIEsD,EAAA,SAACC,GAAD,OAAkBC,0BAAgB,CAC/CJ,cACAT,OAAQc,YAAcF,0CChBXG,EAAYC,IAAgB,CACvCC,UAAW,WACXC,QAAS,WACPC,aAAaC,QACbC,OAAOC,SAASC,YAKPC,GAAgB,CAC3BC,IAAK,OACLC,YACAC,UAAW,GACXC,WAAY,CAACb,GACbc,SAAU,KCRCjB,GAAUkB,cAIjBC,GAASC,uBAAa,CAC1BC,WAAW,EACXC,MAAO,SAMHC,GAAmBC,8BADT,IAGVC,GAAW,SAACC,EAAcC,GAG9B,MAAkB,QAAdA,EACKC,sBACLF,EACAH,GACEM,0BACEC,YAAiB9B,IAAUmB,MAM5BS,sBACLF,EACAG,0BACEC,YAAiB9B,cAUR,WAAwE,IAAhD+B,EAAgDlI,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzB,MACtDgG,EAAcmC,EAAkBhC,IAChCiC,EAAmBC,yBAAetB,GAAef,GACjDsC,EAAQV,GAASQ,EAAkBF,GAEzC,MAAO,CAAEI,QAAOC,UADEC,uBAAaF,EAAO,GAAI,eChDfG,GAArBF,gBAAWD,YAmBJI,oLAfX,OACE1G,EAAAC,EAAAC,cAACyG,EAAA,EAAD,CAAUL,MAAOA,IACftG,EAAAC,EAAAC,cAAC0G,EAAA,EAAD,CACEC,QAAS,KACTN,UAAWA,IAEXvG,EAAAC,EAAAC,cAAC4G,EAAA,EAAD,CAAiB3C,QAASA,IACxBnE,EAAAC,EAAAC,cAACqD,EAAD,gBATM7C,aCMEqG,QACW,cAA7BnC,OAAOC,SAASmC,UAEe,UAA7BpC,OAAOC,SAASmC,UAEhBpC,OAAOC,SAASmC,SAASC,MACvB,2DCfNC,IAASC,OAAOnH,EAAAC,EAAAC,cAACkH,GAAD,MAASC,SAASC,eAAe,SDsI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.245b1361.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background.00fb1958.jpg\";","import styled from 'styled-components';\nimport background from '~/assets/background.jpg';\n\nexport const Row = (styled.div)<any>`\n  display: flex;\n  // flex: 1 1 auto;\n  flex-direction: row;\n  justify-content: flex-start;\n  box-sizing: border-box;\n`;\n\nexport const TablePositioner = (styled.div)<any>`\n  display: flex;\n  flex: 1;\n  overflow: hidden;\n  flex-direction: row;\n  justify-content: flex-start;\n  position: relative;\n  margin-top: 1rem;\n`;\n\nexport const PageInnerContent = (styled.div)<any>`\n  flex: 1;\n  overflow: none;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const ButtonsContainer = (styled.div)<any>`\n  & button {\n    margin: 0 0.5rem;\n  }\n\n  &:first-child > button {\n    margin-left: 0;\n  }\n`;\n\nexport const PageWrapper = (styled.div)<any>`\n  background-color: rgba(255,255,255,0.8);\n  display: flex;\n  flex-direction: column;\n  flex: 1 1 auto;\n  max-width: 60vw;\n  margin: 3rem 0;\n  padding: 2rem;\n  border-radius: 0.25rem;\n  box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);\n  // overflow-y: scroll;\n`;\n\nexport const PageContainer = (styled.div)<any>`\n  display: flex;\n  position: relative;\n  flex-direction: row;\n  width: 100%;\n  height: 100vh;\n  justify-content: center;\n  box-sizing: border-box;\n  background: url(${background});\n  background-repeat: no-repeat;\n  background-size: cover;\n  background-position: fixed;\n`;\n","import { range } from 'lodash';\n\nconst rollDice = (sides: number = 6) => {\n  return Math.floor(Math.random() * sides) + 1;\n};\n\nexport default (diceAmount: number = 3): number[] => {\n  return range(0, diceAmount)\n    .map(() => {\n      return rollDice();\n    });\n};\n","import { range } from 'lodash';\nimport { getRollObj } from '../';\n\nexport default (): number[][] => {\n  return range(0, 6).map((item) => {\n    return getRollObj();\n  });\n};\n","import React, { Component } from 'react';\n\nimport { AgGridReact } from 'ag-grid-react';\n\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-balham.css';\n\ninterface ITableColumn {\n  headerName: string;\n  field: string;\n}\n\ninterface IProps {\n  columns: ITableColumn[];\n  rowData: any[];\n}\n\nclass AdvancedTable extends Component<IProps> {\n  private gridApi: any;\n\n  constructor(props) {\n    super(props);\n\n    this.onGridReady = this.onGridReady.bind(this);\n  }\n\n  onGridReady(params) {\n    this.gridApi = params.api;\n    this.gridApi.sizeColumnsToFit();\n  }\n\n  componentDidMount() {\n\n  }\n\n  render() {\n    const { columns, rowData } = this.props;\n    return (\n      <div\n        className=\"ag-theme-balham\"\n        style={{\n          height: '100%',\n          width: '100%',\n        }}\n      >\n        <AgGridReact\n          columnDefs={columns}\n          rowData={rowData}\n          animateRows={true}\n          onGridReady={this.onGridReady}\n        >\n        </AgGridReact>\n      </div>\n    );\n  }\n}\n\nexport default AdvancedTable;\n","import React, { Component } from 'react';\nimport { ButtonsContainer, PageContainer, PageInnerContent, PageWrapper, Row, TablePositioner } from './styles';\nimport Button from '@material-ui/core/Button';\nimport { range } from 'lodash';\nimport { getStatsObj } from '~/pages/home/helpers';\nimport AdvancedTable from '~/components/advanced-table';\nimport { round } from 'mathjs';\n\ninterface IProps {\n  [x: string]: any;\n}\n\ninterface IState {\n  rolls: number[][][];\n}\n\nexport default class HomePage extends Component<IProps, IState> {\n  state = {\n    rolls: [],\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.rollDice = this.rollDice.bind(this);\n    this.clearRolls = this.clearRolls.bind(this);\n    this.rollMultipleDice = this.rollMultipleDice.bind(this);\n  }\n\n  rollDice() {\n    const fullRoll = getStatsObj();\n    this.setState((prevState) => {\n      return {\n        rolls: [\n          ...prevState.rolls,\n          fullRoll,\n        ],\n      };\n    });\n  }\n\n  rollMultipleDice(rollAmount: number = 100) {\n    return () => {\n      const rolls = range(0, rollAmount).map(getStatsObj);\n      this.setState((prevState) => {\n        return {\n          rolls: [\n            ...prevState.rolls,\n            ...rolls,\n          ],\n        };\n      });\n    };\n  }\n\n  clearRolls() {\n    this.setState({ rolls: [] });\n  }\n\n  getDisplayRolls() {\n    return this.state.rolls.map((statRow: number[][]) => {\n      const computedStatBlock: number[] = statRow.reduce((acc, rowRolls, index) => {\n        return [\n          ...acc,\n          rowRolls.reduce((a, b) => a + b),\n        ];\n      }, []).sort((a, b) => b - a);\n      const average = round(computedStatBlock.reduce((total, current) => total + current) / 6, 2);\n      return {\n        ...computedStatBlock,\n        average,\n      };\n    });\n  }\n\n  render() {\n    const defaultColumnSettings = {\n      sortable: true,\n      resizable: true,\n      filter: true,\n    };\n    const displayRolls = this.getDisplayRolls();\n    const statColumns = range(0, 6).map(item => ({\n      headerName: `Stat ${item + 1}`,\n      field: item.toString(),\n      ...defaultColumnSettings,\n    }));\n    const otherColumns = [{\n      headerName: 'Average',\n      field: 'average',\n      ...defaultColumnSettings,\n    }];\n    const columns = [\n      ...statColumns,\n      ...otherColumns,\n    ];\n\n    console.log({\n      columns,\n      displayRolls,\n    });\n    return (\n      <PageContainer>\n        <PageWrapper>\n          <PageInnerContent>\n            <Row>\n              <h1>Really fair dice roller</h1>\n            </Row>\n            <Row>\n              <ButtonsContainer>\n                <Button variant=\"contained\" color=\"primary\" onClick={this.rollDice}>\n                  ROLL!\n                </Button>\n                <Button variant=\"contained\" color=\"primary\" onClick={this.rollMultipleDice()}>\n                  ROLL 100!\n                </Button>\n                <Button variant=\"contained\" color=\"primary\" onClick={this.clearRolls}>\n                  CLEAR!\n                </Button>\n              </ButtonsContainer>\n            </Row>\n            <TablePositioner>\n              <AdvancedTable\n                columns={columns}\n                rowData={displayRolls}\n              />\n            </TablePositioner>\n          </PageInnerContent>\n        </PageWrapper>\n      </PageContainer>\n    );\n  }\n}\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { HomePage } from '~/pages';\n\nexport default () => (\n  <Router\n    basename={'/dnd-roller'}\n  >\n    <Switch>\n      <Route component={HomePage} exact path=\"/\" />\n    </Switch>\n  </Router>\n);\n","import { combineReducers } from 'redux';\nimport { connectRouter } from 'connected-react-router';\n\n\nexport interface IApplicationState {\n  [x: string]: any;\n}\n\nconst initialState = {};\n\nconst rootReducer = (state = initialState, action: any) => {\n  const { type } = action;\n  switch (type) {\n    default:\n      return state;\n  }\n};\n\nexport default (history: any) => combineReducers({\n  rootReducer,\n  router: connectRouter(history),\n});\n","import createEncryptor from 'redux-persist-transform-encrypt';\n\nimport storage from 'redux-persist/lib/storage';\n\nexport const encryptor = createEncryptor({\n  secretKey: 'test-key',\n  onError: () => {\n    localStorage.clear();\n    window.location.reload();\n  },\n});\n\n\nexport const persistConfig = {\n  key: 'root',\n  storage,\n  blacklist: [],\n  transforms: [encryptor],\n  throttle: 1000,\n};\n","import { applyMiddleware, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { createBrowserHistory } from 'history';\nimport { createLogger } from 'redux-logger';\nimport { persistReducer, persistStore } from 'redux-persist';\nimport { routerMiddleware } from 'connected-react-router';\n\nimport createRootReducer from './reducer';\nimport { persistConfig } from './config';\n\nexport const history = createBrowserHistory();\n\n/* Middleware Configuration */\n\nconst logger = createLogger({\n  collapsed: true,\n  level: 'info',\n});\n\n/* Redux Devtools Configuration */\n\nconst options = {};\nconst composeEnhancers = composeWithDevTools(options);\n\nconst getStore = (reducer: any, storeMode: string) => {\n  // Dev store, needs compose enhancers,\n  // Only use redux devtools in dev mode as it is expensive\n  if (storeMode === 'dev') {\n    return createStore(\n      reducer,\n      composeEnhancers(\n        applyMiddleware(\n          routerMiddleware(history), logger\n        )\n      )\n    );\n  }\n  // Prod Store\n  return createStore(\n    reducer,\n    applyMiddleware(\n      routerMiddleware(history)\n    )\n  );\n};\n\ninterface IConfiguredStore {\n  store: any;\n  persistor: any;\n}\n\nexport default function configureStore(mode: 'dev' | 'prod' = 'dev'): IConfiguredStore {\n  const rootReducer = createRootReducer(history);\n  const persistedReducer = persistReducer(persistConfig, rootReducer);\n  const store = getStore(persistedReducer, mode);\n  const persistor = persistStore(store, {}, () => {});\n  return { store, persistor };\n}\n\n","import React, { Component } from 'react';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { ConnectedRouter } from 'connected-react-router';\n\nimport Router from '../router';\nimport configureStore, { history } from '../store';\nconst { persistor, store } = configureStore();\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <PersistGate\n          loading={null}\n          persistor={persistor}\n        >\n          <ConnectedRouter history={history}>\n            <Router />\n          </ConnectedRouter>\n        </PersistGate>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\n// We want to ignore this file completely in TSLint.\n/* tslint:disable */\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './core/app';\nimport * as serviceWorker from './core/serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}